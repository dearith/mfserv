###################################
#####                         #####
#####     GENERAL SECTION     #####
#####                         #####
###################################
# (plugin metadatas)
[general]

# Notes about the name of the plugin:
# - the name of the plugin is given by the content of .layerapi2_label
#   in this directory (format: plugin_{name of the plugin}@mfserv)
# - the old "name" key in this file is not used anymore

# Version of the plugin (X.Y.Z)
# If the value is {% raw %}{{MODULE_VERSION}}{% endraw %},
# the current module version is used
version={{cookiecutter.version}}

# Summary (one line) of the goal of the plugin
summary={{cookiecutter.one_line_summary}}

# License of the plugin
license={{cookiecutter.license}}

# URL of the plugin homepage
url={{cookiecutter.url}}

# Name of the maintainer of the plugin on the form "Firstname FAMILYNAME <email>"
maintainer={{cookiecutter.maintainer}}

# Vendor of the plugin
vendor={{cookiecutter.vendor}}

{% block extra_nginx_conf_filename -%}
# !!! ADVANCED SETTING !!!
# Use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# The content will be included directly in "server" section
# If you want to include some configuration fragments specific to an app
# don't use this key (in [general] section] but the one in [app_xxxxx] section
# Note: this key is not used with virtualdomain_based_routing
# Note: if you use this key, you can break the whole mfserv module
#       => so there will be a warning at plugin installation about that
extra_nginx_conf_filename=null

{% endblock -%}

{% block extra_redis_service -%}
# If you need a redis instance for your plugin for basic needs (no persistence,
# max of 0.5GB of memory), you can set redis_service key to 1.
# To connect to your instance, use an unix socket connection to
# the value of REDIS_SOCKET_UNIX_SOCKET_PATH env var.
redis_service=0

{% endblock -%}

{% block extra_general -%}
{% endblock -%}


{% block app -%}
{% block app_comment -%}
################################
#####                      #####
#####     APPs SECTION     #####
#####                      #####
################################
# (you can have several section like this one named [app_xxx])

{% endblock -%}
{% block app_section -%}
[app_main]

{% endblock -%}

{% block app_type -%}
# valid values: gunicorn3_sync, gunicorn2_sync, gunicorn3_asyncio
type={{cookiecutter.type}}

{% endblock -%}

{% block app_workers -%}
# number of workers
workers={{cookiecutter.workers}}

{% endblock -%}

{% block app_gunicorn_arg -%}
# wsgi function entry point (main arg for gunicorn)
{% if cookiecutter.type == "gunicorn3_asyncio" %}
gunicorn_arg=main.application:app
{% else %}
gunicorn_arg=main.wsgi:application
{% endif %}

{% endblock -%}

{% block app_xxx_based_routing -%}
# Use prefix based routing:
# http://{host}:{port}/{plugin_name}/{app_name}/...
# (and/or)
# http://{host}:{port}/{plugin_name}/... if app_name == main or only one app in the plugin
prefix_based_routing=true

# Use virtualdomain based routing
# http://{app_name}.{plugin_name}.{host}:{port}/...
# (and/or)
# http://{plugin_name}.{host}:{port}/... if app_name == main or only one app in the plugin
# NOTE: you need a DNS "catch all" to do that (like a DNS CNAME *.{host} => {ip_of_the_host}
virtualdomain_based_routing=false

{% endblock -%}

{% block app_static_routing -%}
# Route directly at the webserver part /static/ url path to static directory
# inside the application directory
static_routing=true

{% endblock -%}

{% block app_prefix_based_routing_extra_routes -%}
# !!! ADVANCED SETTING !!!
# Add extra routes to your plugin (starting by /, not ending by /, separated by ;)
# Example: prefix_based_routing_extra_routes=/foo;/bar
# null => no extra routes
# Note: if you use this key, you can break the whole mfserv module
#       and generate some conflicts with other plugins
#       => so there will be a warning at plugin installation about that
prefix_based_routing_extra_routes=null

{% endblock -%}

{% block app_extra_nginx_conf_filename -%}
# !!! ADVANCED SETTING !!!
# use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# the content will be included directly in your app "location" section
# if you want to include some configuration fragments at a more general level
# don't use this key but the one in [general] section)
# Note: if you use virtualdomain_based_routing, the content will be included
# in the custom "server" section (specific to your app and not in "location")
extra_nginx_conf_filename=null

{% endblock -%}

{% block app_extra_nginx_conf_static_filename -%}
# !!! ADVANCED SETTING !!!
# use this only if you are sure about what you are doing
# extra nginx configuration filename inside your plugin directory
# null => no extra configuration
# the content will be included directly in your app "location" section for
# the "static" routing part (see also extra_nginx_conf_filename key for
# the "dynamic" part)
# if you want to include some configuration fragments at a more general level
# don't use this key but the one in [general] section)
extra_nginx_conf_static_filename=null

{% endblock -%}

{% block app_add_xxx_dir_to_python_path -%}
# If true, add plugin directory to python path
add_plugin_dir_to_python_path=true

# If true, add app directory to python path
add_app_dir_to_python_path=false

{% endblock -%}

{% block app_add_xxx_dir_to_node_path -%}
# If true, add plugin directory to node path
add_plugin_dir_to_node_path=true

# If true, add app directory to node path
add_app_dir_to_node_path=false

{% endblock -%}

# resource limit for each app worker
# rlimit_as => maximum area (in bytes) of address space which may be taken by the worker.
# rlimit_nofile => maximum number of open file descriptors for the current worker.
# rlimit_stack => maximum size (in bytes) of the call stack for the current worker.
#     This only affects the stack of the main thread in a multi-threaded worker.
# rlimit_core => maximum size (in bytes) of a core file that the current worker can create.
# rlimit_fsize =>  maximum size of a file which the worker may create.
# (empty value means no limit)
rlimit_as = 1000000000
rlimit_nofile = 1000
rlimit_stack = 10000000
rlimit_core = 100000
rlimit_fsize = 100000000


{% block extra_app -%}
{% endblock -%}

{% endblock %}

{% block extra_daemons -%}
# !!! ADVANCED SETTINGS !!!
# You can add extra daemons which will be launched within your plugin
# by providing configuration blocks [extra_daemon_*]
# You have to provide a command to daemonize (the command must run in
# foreground and not daemonize by itself)
# [extra_daemon_foo]
# cmd_and_args = /your/foreground/command command_arg1 command_arg2
# numprocesses=1

{% endblock -%}

{% block extra -%}
{% endblock -%}
